{
  "version": 3,
  "sources": ["../../src/glide.ts", "../../src/columns/translate.ts"],
  "sourcesContent": ["type ColumnType = \"string\" | \"primitive\" | \"number\" | \"image-uri\" | \"uri\";\n\nexport type StringColumnValue = { type: \"string\"; value?: string };\n\nexport type ColumnParam = {\n  name: string;\n  displayName: string;\n  type: ColumnType;\n};\n\nexport type ColumnValue =\n  | { type: \"primitive\"; value?: any }\n  | { type: \"number\"; value?: number }\n  | StringColumnValue;\n\nexport type Column = (...values: ColumnValue[]) => Promise<any | undefined>;\n\nfunction convert(x: any) {\n  if (x instanceof Date) {\n    return x.toISOString();\n  } else if (Array.isArray(x)) {\n    return x.map(convert);\n  } else {\n    return x;\n  }\n}\n\nexport async function listen(event: MessageEvent<any>, main: Column) {\n  const {\n    // origin,\n    data: { key, params },\n  } = event;\n\n  let result;\n  let error;\n  try {\n    result = await main(...params);\n  } catch (e) {\n    result = undefined;\n    try {\n      error = e.toString();\n    } catch (e) {\n      error = \"Exception can't be stringified.\";\n    }\n  }\n\n  const response: any = { key };\n  if (result !== undefined) {\n    result = convert(result);\n    response.result = { type: \"string\", value: result };\n  }\n  if (error !== undefined) {\n    response.error = error;\n  }\n\n  // TODO fix this type\n  (event.source?.postMessage as any)(response, \"*\");\n}\n\nexport type Manifest = {\n  name: string;\n  description: string;\n  author: string;\n  params: ColumnParam[];\n  result: { type: ColumnType };\n  icon: string;\n  about?: string;\n  video?: string;\n};\n\nexport type ManifestConvenient<T> = Omit<Manifest, \"params\" | \"icon\"> & {\n  params: { [Name in keyof T]: Omit<ColumnParam, \"name\"> };\n  icon?: \"glide\" | string;\n};\n\nexport type ColumnDefinition<TColumnParams> =\n  ManifestConvenient<TColumnParams> & {\n    run: Column;\n    example?: Partial<TColumnParams>;\n  };\n\nexport function column<TColumnParams>(\n  manifest: ColumnDefinition<TColumnParams>\n): ColumnDefinition<TColumnParams> & { json: string } {\n  // We run this code in node to output manifests, so check for window.\n  if (typeof window !== \"undefined\") {\n    window.addEventListener(\"message\", e => listen(e, manifest.run));\n  }\n\n  return {\n    ...manifest,\n    json: JSON.stringify(toStrictManifest(manifest), null, 2),\n  };\n}\n\nconst glideIcon = `\n        <svg\n          width=\"48\"\n          height=\"48\"\n          viewBox=\"0 0 26 27\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            d=\"M0 14.85L14.3 0V7.29C14.3 11.4653 11.0406 14.85 7.02 14.85H0Z\"\n            fill=\"currentColor\"\n          />\n          <path\n            d=\"M11.7 19.71C11.7 15.5347 14.9594 12.15 18.98 12.15H26L11.7 27V19.71Z\"\n            fill=\"currentColor\"\n          />\n        </svg>\n    `;\n\nconst defaultIcon = `<svg width=\"48\" height=\"48\" viewBox=\"0 0 48 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.0002 34.828L2.58624 25.414C1.80524 24.633 1.80524 23.367 2.58624 22.586L12.0002 13.172L14.8292 16L6.82924 24L14.8292 32L12.0002 34.828Z\" fill=\"currentColor\"/>\n<path d=\"M36.0004 34.828L33.1714 32L41.1714 24L33.1714 16L36.0004 13.172L45.4144 22.586C46.1954 23.367 46.1954 24.633 45.4144 25.414L36.0004 34.828Z\" fill=\"currentColor\"/>\n<path d=\"M26.5485 5.57617L17.5723 41.4553L21.4527 42.4261L30.4289 6.54697L26.5485 5.57617Z\" fill=\"currentColor\"/>\n</svg>`;\n\nexport function toStrictManifest(\n  convenient: ManifestConvenient<any>\n): Manifest {\n  // We carefully pick out just the props in manifest, because more\n  // could come in from the component.\n  const { name, description, author, result, params, about, video } =\n    convenient;\n\n  let { icon = defaultIcon } = convenient;\n  if (icon === \"glide\") {\n    icon = glideIcon;\n  }\n\n  return {\n    name,\n    description,\n    author,\n    result,\n    about,\n    icon,\n    video,\n    params: Object.entries(params).map(([name, param]) => ({\n      name,\n      ...param,\n    })),\n  };\n}\n", "import * as glide from \"../glide\";\n\nconst run: glide.Column = async (textColumn, langColumn, keyColumn) => {\n  const text = textColumn?.value;\n  if (text === undefined) return undefined;\n\n  const lang = langColumn?.value;\n  if (lang === undefined) return undefined;\n\n  const key = keyColumn?.value;\n  if (key === undefined) return undefined;\n\n  const { data } = await fetch(\n    `https://translation.googleapis.com/language/translate/v2?key=${key}`,\n    {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      method: \"POST\",\n      body: JSON.stringify({ q: [text], target: lang }),\n    }\n  ).then(x => x.json());\n\n  if (\n    data !== undefined &&\n    data.translations !== undefined &&\n    data.translations.length > 0\n  ) {\n    return data.translations[0].translatedText;\n  }\n\n  return undefined;\n};\n\nexport default glide.column({\n  name: \"Google Translate\",\n  description: \"Translate from one language to another\",\n  author: \"David Siegel <david@glideapps.com>\",\n  video: \"https://www.youtube.com/watch?v=A3knNbGfXh4\",\n  about: `\n      Find supported languages at [cloud.google.com/translate/docs/languages](https://cloud.google.com/translate/docs/languages).\n    `,\n  params: {\n    text: {\n      displayName: \"Text\",\n      type: \"string\",\n    },\n    language: {\n      displayName: \"Target Language\",\n      type: \"string\",\n    },\n    key: {\n      displayName: \"API Key\",\n      type: \"string\",\n    },\n  },\n  result: { type: \"string\" },\n  run,\n  example: {\n    text: \"Hello, world!\",\n    language: \"es\",\n  },\n  icon: `\n      <svg width=\"48\" height=\"48\" viewBox=\"0 0 48 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M25.74 30.15L20.66 25.13L20.72 25.07C24.2 21.19 26.68 16.73 28.14 12.01H34V8H20V4H16V8H2V11.98H24.34C22.99 15.84 20.88 19.5 18 22.7C16.14 20.63 14.6 18.38 13.38 16H9.38C10.84 19.26 12.84 22.34 15.34 25.12L5.17 35.17L8 38L18 28L24.22 34.22L25.74 30.15ZM37 20H33L24 44H28L30.25 38H39.75L42 44H46L37 20ZM31.75 34L35 25.33L38.25 34H31.75Z\" fill=\"currentColor\"/>\n      </svg>\n    `,\n});\n"],
  "mappings": "goBAiBA,WAAiB,EAAQ,CACvB,MAAI,aAAa,MACR,EAAE,cACA,MAAM,QAAQ,GAChB,EAAE,IAAI,GAEN,EAIX,WAA6B,EAA0B,EAAc,gCA3BrE,MA4BE,GAAM,CAEJ,KAAM,CAAE,MAAK,WACX,EAEA,EACA,EACJ,GAAI,CACF,EAAS,KAAM,GAAK,GAAG,SAChB,EAAP,CACA,EAAS,OACT,GAAI,CACF,EAAQ,EAAE,iBACH,EAAP,CACA,EAAQ,mCAIZ,GAAM,GAAgB,CAAE,OACxB,AAAI,IAAW,QACb,GAAS,EAAQ,GACjB,EAAS,OAAS,CAAE,KAAM,SAAU,MAAO,IAEzC,IAAU,QACZ,GAAS,MAAQ,GAIlB,MAAM,SAAN,cAAc,aAAd,OAAkC,EAAU,OAyBxC,WACL,EACoD,CAEpD,MAAI,OAAO,SAAW,aACpB,OAAO,iBAAiB,UAAW,GAAK,EAAO,EAAG,EAAS,MAGtD,OACF,GADE,CAEL,KAAM,KAAK,UAAU,EAAiB,GAAW,KAAM,KAI3D,GAAM,GAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAmBZ,EAAc;AAAA;AAAA;AAAA;AAAA,QAMb,WACL,EACU,CAGV,GAAM,CAAE,OAAM,cAAa,SAAQ,SAAQ,SAAQ,QAAO,SACxD,EAEE,CAAE,OAAO,GAAgB,EAC7B,MAAI,KAAS,SACX,GAAO,GAGF,CACL,OACA,cACA,SACA,SACA,QACA,OACA,QACA,OAAQ,OAAO,QAAQ,GAAQ,IAAI,CAAC,CAAC,EAAM,KAAY,GACrD,QACG,KC7IT,GAAM,GAAoB,CAAO,EAAY,EAAY,IAAc,0BACrE,GAAM,GAAO,iBAAY,MACzB,GAAI,IAAS,OAAW,OAExB,GAAM,GAAO,iBAAY,MACzB,GAAI,IAAS,OAAW,OAExB,GAAM,GAAM,iBAAW,MACvB,GAAI,IAAQ,OAAW,OAEvB,GAAM,CAAE,QAAS,KAAM,OACrB,gEAAgE,IAChE,CACE,QAAS,CACP,OAAQ,mBACR,eAAgB,oBAElB,OAAQ,OACR,KAAM,KAAK,UAAU,CAAE,EAAG,CAAC,GAAO,OAAQ,MAE5C,KAAK,GAAK,EAAE,QAEd,GACE,IAAS,QACT,EAAK,eAAiB,QACtB,EAAK,aAAa,OAAS,EAE3B,MAAO,GAAK,aAAa,GAAG,iBAMzB,EAAQ,AAAM,EAAO,CAC1B,KAAM,mBACN,YAAa,yCACb,OAAQ,qCACR,MAAO,8CACP,MAAO;AAAA;AAAA,MAGP,OAAQ,CACN,KAAM,CACJ,YAAa,OACb,KAAM,UAER,SAAU,CACR,YAAa,kBACb,KAAM,UAER,IAAK,CACH,YAAa,UACb,KAAM,WAGV,OAAQ,CAAE,KAAM,UAChB,MACA,QAAS,CACP,KAAM,gBACN,SAAU,MAEZ,KAAM;AAAA;AAAA;AAAA;",
  "names": []
}
