{
  "version": 3,
  "sources": ["../../src/glide.ts", "../../src/urls.ts", "../../src/columns/qrcode.ts"],
  "sourcesContent": ["type ColumnType = \"string\" | \"primitive\" | \"number\" | \"image-uri\" | \"uri\";\n\nexport type StringColumnValue = { type: \"string\"; value?: string };\n\nexport type ColumnParam = {\n  name: string;\n  displayName: string;\n  type: ColumnType;\n};\n\nexport type ColumnValue =\n  | { type: \"primitive\"; value?: any }\n  | { type: \"number\"; value?: number }\n  | StringColumnValue;\n\nexport type Column = (...values: ColumnValue[]) => Promise<any | undefined>;\n\nfunction convert(x: any) {\n  if (x instanceof Date) {\n    return x.toISOString();\n  } else if (Array.isArray(x)) {\n    return x.map(convert);\n  } else {\n    return x;\n  }\n}\n\nexport async function listen(event: MessageEvent<any>, main: Column) {\n  const {\n    // origin,\n    data: { key, params },\n  } = event;\n\n  let result;\n  let error;\n  try {\n    result = await main(...params);\n  } catch (e) {\n    result = undefined;\n    try {\n      error = e.toString();\n    } catch (e) {\n      error = \"Exception can't be stringified.\";\n    }\n  }\n\n  const response: any = { key };\n  if (result !== undefined) {\n    result = convert(result);\n    response.result = { type: \"string\", value: result };\n  }\n  if (error !== undefined) {\n    response.error = error;\n  }\n\n  // TODO fix this type\n  (event.source?.postMessage as any)(response, \"*\");\n}\n\nexport type Manifest = {\n  name: string;\n  description: string;\n  author: string;\n  params: ColumnParam[];\n  result: { type: ColumnType };\n  icon: string;\n  about?: string;\n  video?: string;\n};\n\nexport type ManifestConvenient<T> = Omit<Manifest, \"params\" | \"icon\"> & {\n  params: { [Name in keyof T]: Omit<ColumnParam, \"name\"> };\n  icon?: \"glide\" | string;\n};\n\nexport type ColumnDefinition<TColumnParams> =\n  ManifestConvenient<TColumnParams> & {\n    run: Column;\n    example?: Partial<TColumnParams>;\n  };\n\nexport function column<TColumnParams>(\n  manifest: ColumnDefinition<TColumnParams>\n): ColumnDefinition<TColumnParams> & { json: string } {\n  // We run this code in node to output manifests, so check for window.\n  if (typeof window !== \"undefined\") {\n    window.addEventListener(\"message\", e => listen(e, manifest.run));\n  }\n\n  return {\n    ...manifest,\n    json: JSON.stringify(toStrictManifest(manifest), null, 2),\n  };\n}\n\nconst glideIcon = `\n        <svg\n          width=\"48\"\n          height=\"48\"\n          viewBox=\"0 0 26 27\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            d=\"M0 14.85L14.3 0V7.29C14.3 11.4653 11.0406 14.85 7.02 14.85H0Z\"\n            fill=\"currentColor\"\n          />\n          <path\n            d=\"M11.7 19.71C11.7 15.5347 14.9594 12.15 18.98 12.15H26L11.7 27V19.71Z\"\n            fill=\"currentColor\"\n          />\n        </svg>\n    `;\n\nconst defaultIcon = `<svg width=\"48\" height=\"48\" viewBox=\"0 0 48 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.0002 34.828L2.58624 25.414C1.80524 24.633 1.80524 23.367 2.58624 22.586L12.0002 13.172L14.8292 16L6.82924 24L14.8292 32L12.0002 34.828Z\" fill=\"currentColor\"/>\n<path d=\"M36.0004 34.828L33.1714 32L41.1714 24L33.1714 16L36.0004 13.172L45.4144 22.586C46.1954 23.367 46.1954 24.633 45.4144 25.414L36.0004 34.828Z\" fill=\"currentColor\"/>\n<path d=\"M26.5485 5.57617L17.5723 41.4553L21.4527 42.4261L30.4289 6.54697L26.5485 5.57617Z\" fill=\"currentColor\"/>\n</svg>`;\n\nexport function toStrictManifest(\n  convenient: ManifestConvenient<any>\n): Manifest {\n  // We carefully pick out just the props in manifest, because more\n  // could come in from the component.\n  const { name, description, author, result, params, about, video } =\n    convenient;\n\n  let { icon = defaultIcon } = convenient;\n  if (icon === \"glide\") {\n    icon = glideIcon;\n  }\n\n  return {\n    name,\n    description,\n    author,\n    result,\n    about,\n    icon,\n    video,\n    params: Object.entries(params).map(([name, param]) => ({\n      name,\n      ...param,\n    })),\n  };\n}\n", "export function url(root: string, params: Record<string, any>): string {\n  const search =\n    \"?\" +\n    Object.entries(params)\n      .map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`)\n      .join(\"&\");\n  return root + search;\n}\n", "import * as glide from \"../glide\";\nimport { url } from \"../urls\";\n\n// TODO support more from https://api.qrserver.com/v1/create-qr-code/\n\nconst run: glide.Column = async (dataValue, sizeValue) => {\n  const { value: data } = dataValue;\n  const { value: size = 500 } = sizeValue;\n\n  if (data === undefined) {\n    return undefined;\n  }\n\n  return url(`https://api.qrserver.com/v1/create-qr-code/`, {\n    data,\n    size: `${size}x${size}`,\n    margin: 0,\n  });\n};\n\nexport default glide.column({\n  name: \"QR Code\",\n  description: \"Generate QR codes\",\n  about: `\n      Uses [goQR.me](https://goqr.me/api/)'s QR code generation API.\n    `,\n  video: \"https://www.youtube.com/watch?v=142TGhaTMtI\",\n  author: \"David Siegel <david@glideapps.com>\",\n  params: {\n    content: {\n      displayName: \"Content\",\n      type: \"primitive\",\n    },\n    size: {\n      displayName: \"Size\",\n      type: \"number\",\n    },\n  },\n  example: { content: \"https://glideapps.com\", size: 250 },\n  result: { type: \"image-uri\" },\n  run,\n  icon: `<svg width=\"48\" height=\"48\" viewBox=\"0 0 48 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path d=\"M16 2H2V16H16V2ZM14 14H4V4H14V14Z\" fill=\"currentColor\"/>\n      <path d=\"M31 42H29V46H46V44H31V42Z\" fill=\"currentColor\"/>\n      <path d=\"M12 6H6V12H12V6Z\" fill=\"currentColor\"/>\n      <path d=\"M2 46H16V32H2V46ZM4 34H14V44H4V34Z\" fill=\"currentColor\"/>\n      <path d=\"M12 36H6V42H12V36Z\" fill=\"currentColor\"/>\n      <path d=\"M32 2V16H46V2H32ZM44 14H34V4H44V14Z\" fill=\"currentColor\"/>\n      <path d=\"M42 6H36V12H42V6Z\" fill=\"currentColor\"/>\n      <path d=\"M46 18H42V22H46V18Z\" fill=\"currentColor\"/>\n      <path d=\"M6 26H2V30H6V26Z\" fill=\"currentColor\"/>\n      <path d=\"M23 18H15V20H25V16V14H27V10H25H23H21V6H23V8H30V2H28V6H25V2H24H20H19V12H23V14H19V16H23V18Z\" fill=\"currentColor\"/>\n      <path d=\"M5 24H9H11H12V26H8V28H12V30H20V28H14V26V22H11V19H9V22H7V18H2V20H5V24Z\" fill=\"currentColor\"/>\n      <path d=\"M24 42V37H20V33H18V39H22V42H18V44H22V46H27V44H24V42Z\" fill=\"currentColor\"/>\n      <path d=\"M34 22H30V17H28V24H38V22H36V20H39V18H36H34H32V20H34V22Z\" fill=\"currentColor\"/>\n      <path d=\"M32 40H35V42H39V40V38V35H35V38H32V35H30V38H28V30H26V28H24V22H17V26H19V24H22V28V32H26V38V40H28H30H32Z\" fill=\"currentColor\"/>\n      <path d=\"M44 27H41H39H34V31H32V27H30V33H36V29H39V32H41V29H44V35H41V41H46V39H43V37H46V29V27V24H44V27Z\" fill=\"currentColor\"/>\n      </svg>\n      `,\n});\n"],
  "mappings": "goBAiBA,WAAiB,EAAQ,CACvB,MAAI,aAAa,MACR,EAAE,cACA,MAAM,QAAQ,GAChB,EAAE,IAAI,GAEN,EAIX,WAA6B,EAA0B,EAAc,gCA3BrE,MA4BE,GAAM,CAEJ,KAAM,CAAE,MAAK,WACX,EAEA,EACA,EACJ,GAAI,CACF,EAAS,KAAM,GAAK,GAAG,SAChB,EAAP,CACA,EAAS,OACT,GAAI,CACF,EAAQ,EAAE,iBACH,EAAP,CACA,EAAQ,mCAIZ,GAAM,GAAgB,CAAE,OACxB,AAAI,IAAW,QACb,GAAS,EAAQ,GACjB,EAAS,OAAS,CAAE,KAAM,SAAU,MAAO,IAEzC,IAAU,QACZ,GAAS,MAAQ,GAIlB,MAAM,SAAN,cAAc,aAAd,OAAkC,EAAU,OAyBxC,WACL,EACoD,CAEpD,MAAI,OAAO,SAAW,aACpB,OAAO,iBAAiB,UAAW,GAAK,EAAO,EAAG,EAAS,MAGtD,OACF,GADE,CAEL,KAAM,KAAK,UAAU,EAAiB,GAAW,KAAM,KAI3D,GAAM,GAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAmBZ,EAAc;AAAA;AAAA;AAAA;AAAA,QAMb,WACL,EACU,CAGV,GAAM,CAAE,OAAM,cAAa,SAAQ,SAAQ,SAAQ,QAAO,SACxD,EAEE,CAAE,OAAO,GAAgB,EAC7B,MAAI,KAAS,SACX,GAAO,GAGF,CACL,OACA,cACA,SACA,SACA,QACA,OACA,QACA,OAAQ,OAAO,QAAQ,GAAQ,IAAI,CAAC,CAAC,EAAM,KAAY,GACrD,QACG,KC/IF,WAAa,EAAc,EAAqC,CACrE,GAAM,GACJ,IACA,OAAO,QAAQ,GACZ,IAAI,CAAC,CAAC,EAAG,KAAO,GAAG,mBAAmB,MAAM,mBAAmB,MAC/D,KAAK,KACV,MAAO,GAAO,ECDhB,GAAM,GAAoB,CAAO,EAAW,IAAc,0BACxD,GAAM,CAAE,MAAO,GAAS,EAClB,CAAE,MAAO,EAAO,KAAQ,EAE9B,GAAI,IAAS,OAIb,MAAO,GAAI,8CAA+C,CACxD,OACA,KAAM,GAAG,KAAQ,IACjB,OAAQ,MAIL,EAAQ,AAAM,EAAO,CAC1B,KAAM,UACN,YAAa,oBACb,MAAO;AAAA;AAAA,MAGP,MAAO,8CACP,OAAQ,qCACR,OAAQ,CACN,QAAS,CACP,YAAa,UACb,KAAM,aAER,KAAM,CACJ,YAAa,OACb,KAAM,WAGV,QAAS,CAAE,QAAS,wBAAyB,KAAM,KACnD,OAAQ,CAAE,KAAM,aAChB,MACA,KAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
